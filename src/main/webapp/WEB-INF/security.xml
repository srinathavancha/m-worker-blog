<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security" xmlns:beans="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security.xsd">

		<!-- user expressions to write methods on access attributes which is more flexible -->
		<!-- other wise simply write role name i.e "ROLE_ADMIN" -->
		<http use-expressions="true">
				<!-- application specific pattern urls to intercept -->
				<intercept-url pattern="/users**" access="hasRole('ROLE_ADMIN')" />
				<intercept-url pattern="/users/**" access="hasRole('ROLE_ADMIN')" />
				<intercept-url pattern="/account**" access="hasRole('ROLE_USER')" />
				<!-- custom form for login -->
				<form-login login-page="/login.html" authentication-failure-url="/login.html?error=true"
						default-target-url="/" />
				<!-- logout actions -->
				<logout invalidate-session="true" logout-url="/logout" logout-success-url="/login.html" />
				<!-- for deny page presenting -->
				<access-denied-handler error-page="/denied.html"/>
		</http>

		<!-- which roles does user have -->
		<authentication-manager>
				<authentication-provider>
		<!-- password encrypt type bcrypt -->
				<password-encoder hash="bcrypt"></password-encoder>
						<jdbc-user-service data-source-ref="dataSource"
								authorities-by-username-query="select user.name, role.name from user
														join user_role on user.id = user_role.users_id
														join role on user_role.roles_id = role.id
														where user.name = ?"
								users-by-username-query="select name,password,enabled from user where name = ?" />
				</authentication-provider>
		</authentication-manager>
</beans:beans>