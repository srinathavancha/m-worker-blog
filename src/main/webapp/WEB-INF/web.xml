<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" version="3.0">
  <display-name>m-worker-blog</display-name>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>
  
	<!--   presentation layer is defined in this servlet  -->
	<servlet>
        <servlet-name>dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <url-pattern>*.html</url-pattern>
        <url-pattern>*.htm</url-pattern>
        <url-pattern>*.json</url-pattern>
        <url-pattern>*.xml</url-pattern>
    </servlet-mapping>
    
	<!--     REST of context is  defined in this context-->
	<!-- Spring will read the contents of /WEB-INF/applicationContext.xml
		and it will create an other spring context, because
		we can have multiple servlets/ multiple context defined by Dispatcher Servlet or other servlets, but
		in a typical web application we usually have single service repository layer,
		Single connection to database which can be pooled and so on.
	 -->
    <listener>
	    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>  
	
	<!-- 
		Every mapping in persistence entity is by default LAZY
		Mapped variables are not loaded when entity is loaded, instead there will be a proxy
		When we access this proxy outside the transaction, we get an error called "LazyInitializationException"
		There are 2 ways to fix it
		1. Easy Approach: A filter which will open transaction in the presentation layer and it will load the data
		 - it may have implications
		 - performance problem
		 - do not have control on database select under our control completely
		2. Complex Approach:  
		  
	 -->
	 
	<!-- 	 Easy Approach Start-->
<!-- 	<filter>
		<filter-name>oemInViewFilter</filter-name>
		<filter-class>org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter</filter-class>
		<init-param>
			<param-name>entityManagerFactoryBeanName</param-name>
			<param-value>emf</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>oemInViewFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping> -->
	<!-- 	 Easy Approach End-->
</web-app>